//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//     Website: http://ITdos.com/Dos/ORM/Index.html
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Linq.Expressions;
using Dos.ORM;
using LeoTools.Extension;
using SignUpTools.Model;

namespace SignUpTools.DAL
{
    /// <summary>
    /// 实体类AuditLog。(属性说明自动提取数据库字段的描述信息)
    /// </summary>
    public class AuditLogDAL :SqlProvider<AuditLogModel>
    {
        public static AuditLogDAL dal = new AuditLogDAL();
        public bool DeleteAuditLog(Expression<Func<AuditLogModel, bool>> expression)
        {
            return Delete(expression);
        }

        public bool DeleteAuditLog(int id)
        {
            return Delete(m => m.ID == id);
        }

        public AuditLogModel GetAuditLogModel(Expression<Func<AuditLogModel, bool>> expression)
        {
            return GetEntity(expression);
        }

        public AuditLogModel GetAuditLogModel(int id)
        {
            return GetEntity(m => m.ID == id);
        }

        public List<AuditLogModel> GetAuditLogModels(Expression<Func<AuditLogModel, bool>> expression)
        {
            return GetList(expression);
        }
        public List<AuditLogModel> GetListByActiveID(int eid)
        {
            string sql = $@"select t.*,t1.UserName CreateUserName,t1.Avatars from AuditLog t left join [User] t1 on t.ManageUserID=t1.ID where t.ActiveID={eid} order by t.CreateTime desc ";
            return Context.FromSql(sql).ToList<AuditLogModel>();
        } 


        public List<AuditLogModel> GetList(int type,int userid,PageFliter pageFliter)
        {
            string sql = "";
            if (type == 0)
            {
                sql = $"select * from AuditLog where CreateUserID={userid} order by CreateTime desc ";
            }
            else if (type == 1)
            {
                sql = $"select * from AuditLog t where exists(select 1 from SignInRecord where ActiveID=t.ID and CreateUserID={userid})  order by CreateTime desc ";
            }
            else if (type == 2)
            {
                sql = $"select * from AuditLog t where exists(select 1 from FavoriteAuditLog where ActiveID=t.ID and CreateUserID={userid})  order by CreateTime desc ";
            }
            return Context.FromSql(sql).ToList<AuditLogModel>().GetPage(pageFliter).OrderByDescending(m=>m.CreateTime).ToList();
        }

        public bool InsertActiveModel(AuditLogModel entity)
        {
            return Insert(entity);
        }

        public bool InsertActiveModel(List<AuditLogModel> entities)
        {
            return Insert(entities);
        }

        public bool UpdateActiveModel(AuditLogModel entity)
        {
            return Update(entity);
        }

        public bool UpdateActiveModel(Dictionary<Field, object> fields, Expression<Func<AuditLogModel, bool>> expression)
        {
            return Update(fields, expression);
        }

        public bool AddAdmin(AuditLogModel AuditLogModel ,ActivesManageApplyModel activesManageApplyModel)
        {

            SqlConnection connection = new SqlConnection(ConnStr);
            connection.Open();
            var tran = connection.BeginTransaction();
            try
            {
               var id= Context.Insert(tran, AuditLogModel);
                Context.Update(tran, activesManageApplyModel);
                tran.Commit();
                connection.Close();
                return true;
            }
            catch (Exception ex)
            {
                tran.Rollback();
                connection.Close();
                return false;
            }
        }

    }
}